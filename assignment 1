1. Note on distributed hash tables

A distributed hash table (DHT) is a type of distributed system that provides a lookup service similar to a hash table. In a hash table, data is stored and retrieved using keys, and the keys are used to determine the location of the data in the table. A distributed hash table is similar, but the data is distributed across multiple nodes in a network rather than being stored in a single table.
Each node in a DHT is in charge of maintaining and storing a certain amount of data. A client sends a request to the network in order to retrieve or store data. Based on the key of the requested data, the request is then sent to the relevant node. After that, the node reacts to the request by storing or retrieving the data.
Distributed file systems, distributed databases, and peer-to-peer (P2P) networks are just a few of the many applications that use DHTs. They offer a scalable and effective means of storing and retrieving data, which makes them very helpful for large-scale distributed systems.
A distributed hash table (DHT) is a type of distributed system that provides a lookup service similar to a hash table. DHTs are used for a variety of purposes, including:
Peer-to-peer (P2P) networks − DHTs are often used in P2P networks to facilitate the sharing of resources, such as files or data, between peers. DHTs allow peers to locate resources on the network and download them directly from one another.
Distributed databases − DHTs can be used to store and retrieve data in a distributed database. Because the data is distributed across multiple nodes in the network, DHTs can provide a scalable and efficient way to store and retrieve large amounts of data.
Distributed file systems − DHTs can be used to store and manage files in a distributed file system. By distributing the files across multiple nodes, DHTs can provide a scalable and fault-tolerant way to store and access large amounts of data.
Content delivery networks − DHTs can be used to store and distribute content, such as videos or images, across a network of servers. This can help to reduce the load on a single server and improve the performance of the network.

2. Full decentralised ecosystem in blockchain 

Blockchain is a distributed ledger technology that allows the storage of data in blocks of information, with each block containing batches of transactions from one moment in time. Its open, decentralized and secure nature allows blockchain to disrupt traditional transactional systems.Blockchain has the potential to transform the ecosystem by becoming an indispensable part of our daily lives. Understanding the underlying technology and its impact is imperative for those looking to capitalize on this new era.
Blockchain Ecosystem:
● Node application: It is a particular internet application that every internet-connected computer must download for participating in a blockchain ecosystem. After node application installation, a user becomes a participant in the blockchain network. Once one has a node application installed, it can participate in the ecosystem.
● Distributed ledger: this is the logical component and the data structure that is managed inside the node application. Once the node application is installed, one can view the respective ledger contents from that ecosystem. One can run as many node applications as likes and is permitted to use, and each will participate in their respective blockchain ecosystems.
● Consensus algorithms: The consensus algorithm is implemented as a part of the node application in the blockchain ecosystem. They provide the rules of the game for how the ecosystem will arrive at the single view of the ledger. Different ecosystems have different ways of attaining consensus. There are different consensus algorithms like PoW, PoS, etc, each method qualifies nodes as honest in their own way before participating in the consensus-building process.
● Virtual machine: It is the representation of the computer environment created by a computer program and operated with instructions programmed in a language. The virtual machine implementation happens alongside the node application. For example, in the Ethereum blockchain ecosystem, the EVM resides inside the node application.
